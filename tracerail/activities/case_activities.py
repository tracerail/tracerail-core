"""
This module contains the definitions for all Temporal Activities related to
case management in the TraceRail system.
"""

import asyncio
from temporalio import activity

@activity.defn(name="enrich_case_data_activity")
async def enrich_case_data(case_data: dict) -> dict:
    """
    This activity simulates an AI agent performing an analysis on case data.

    In a real-world scenario, this activity would make calls to external
    services (like an LLM provider, a rules engine, or a database) to
    generate insights.

    For now, it simulates this process with a short delay and returns a
    hardcoded dictionary of results.

    Args:
        case_data: A dictionary containing the initial data for the case.

    Returns:
        A dictionary containing the AI-generated enrichment data.
    """
    activity.logger.info("Enriching data for case", amount=case_data.get("amount"))

    # Simulate network latency or a long-running process
    await asyncio.sleep(1)

    # In a real implementation, this data would be generated by an AI model
    # or a business rules engine.
    enrichment_result = {
        "ai_summary": "The AI agent has reviewed the case. The expense is for standard office supplies.",
        "ai_policy_check": "Compliant with company policy.",
        "ai_risk_score": "Low",
    }

    activity.logger.info("Enrichment complete.")
    return enrichment_result
