[tool.poetry]
name = "tracerail-core"
version = "1.0.0-alpha.1"
description = "Core SDK for AI workflow systems with human-in-the-loop task management"
authors = ["TraceRail Team <team@tracerail.io>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/tracerail/tracerail-core"
repository = "https://github.com/tracerail/tracerail-core"
documentation = "https://docs.tracerail.io"
keywords = [
    "ai",
    "workflow",
    "temporal",
    "llm",
    "task-management",
    "human-in-the-loop",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{ include = "tracerail" }]

[tool.poetry.dependencies]
python = "^3.11"
temporalio = "^1.6.0"
openai = "^1.26.0"
httpx = "^0.27.0"
python-dotenv = "^1.0.0"
pydantic = "^2.5.0"
rich = "^13.7.0"
pyyaml = "^6.0.1"
typing-extensions = "^4.8.0"
pydantic-settings = "^2.3.4"


# Optional dependencies for specific providers/features
anthropic = { version = "^0.25.0", optional = true }
structlog = "^25.4.0"
opentelemetry-sdk = "^1.35.0"
opentelemetry-exporter-otlp = "^1.35.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
ruff = "^0.4.5"
black = "^24.0.0"
mypy = "^1.8.0"
pre-commit = "^3.5.0"
ipython = "^8.12.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^2.0.0"

[tool.poetry.extras]
anthropic = ["anthropic"]
all = ["anthropic"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]     # Ignore unused imports in __init__.py
"tests/**/*" = ["S101", "D"] # Ignore `assert` and all docstring checks in tests

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["tracerail"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
